---
description: Principes appliqu√©s pour d√©terminer le r√©pertoire racine du projet dans l'√©cosyst√®me Node.js/JavaScript
alwaysApply: true
---

# root-directory-governance.mdc: Principes appliqu√©s pour d√©terminer le r√©pertoire racine du projet dans l'√©cosyst√®me Node.js/JavaScript

> Cr√©√© le : 2025-10-20
> Derni√®re mise √† jour : 2025-10-20

## Objectifs de la r√®gle

- Appliquer un comportement standard reconnu et homog√®ne dans tout le projet pour d√©terminer le r√©pertoire racine de celui-ci
- Rendre les structures de code aussi flexibles que possible en permettant leur d√©placement dans la structure hi√©rarchique de r√©pertoire sans cr√©er d'erreur
- Garantir que tous les chemins dans les fichiers de configuration sont relatifs √† la racine du projet

## Probl√®mes r√©solus/√† r√©soudre

- √âviter d'appliquer des comportements diff√©rents pour d√©terminer un chemin de r√©pertoire
- √âviter d'appliquer des mani√®res de faire diff√©rentes en mati√®re de configuration de chemin dans les fichiers de configuration
- √âliminer les chemins relatifs fragiles du type `../../../` qui cassent lors de refactoring

## Comportement g√©n√©ral attendu

- L'IA et l'utilisateur utilisent toujours le comportement standard tel que d√©fini dans les r√®gles √† appliquer ci-dessous pour d√©terminer la racine du projet
- Tous les chemins dans les fichiers de configuration JSON/YAML sont relatifs √† la racine du projet (repoRoot)
- Un seul package.json existe √† la racine du repository selon les conventions du projet

## Contexte d'application et g√©n√©ralit√©s

- La r√®gle est √©tablie en conformit√© avec les bonnes pratiques standards et reconnues dans l'√©cosyst√®me Node.js/JavaScript
- Convention Node.js universelle : le fichier `package.json` marque la racine d'un projet
- Le package `find-up` est la solution standard de facto utilis√©e par l'√©cosyst√®me (ESLint, Prettier, TypeScript, etc.)

## R√®gles √† appliquer

### Utiliser le package find-up pour d√©terminer la racine du projet

#### R√®gles obligatoires √† appliquer

- **INSTALLER** : `npm install --save-dev find-up`
- **MARQUEUR** : Utiliser `package.json` comme marqueur de r√©pertoire racine (convention Node.js standard)
- **M√âTHODE ASYNCHRONE** : Utiliser `await findUp('package.json', { cwd: __dirname })` dans les contextes async
- **M√âTHODE SYNCHRONE** : Utiliser `findUpSync('package.json', { cwd: __dirname })` dans les contextes synchrones
- **GESTION ERREUR** : Toujours v√©rifier que `package.json` a √©t√© trouv√© et lever une erreur explicite sinon
- **CACHE** : Mettre en cache la racine d√©tect√©e pour √©viter les recherches r√©p√©t√©es

#### Comportements interdits/proscrits/√† √©viter

- **CHEMINS RELATIFS FRAGILES** : √âviter `path.resolve(__dirname, '../../..')` ‚Üí **Solution** : Utiliser `find-up` ‚Üí **R√®gle √† adopter** : D√©tection automatique de la racine
- **HARDCODING** : √âviter de coder en dur des chemins absolus ‚Üí **Solution** : Chemins relatifs depuis repoRoot ‚Üí **R√®gle √† adopter** : Configuration flexible
- **MULTIPLES M√âTHODES** : √âviter d'utiliser des approches diff√©rentes selon les fichiers ‚Üí **Solution** : M√©thode unique centralis√©e ‚Üí **R√®gle √† adopter** : Coh√©rence du projet
- **PROCESS.CWD()** : √âviter `process.cwd()` qui d√©pend d'o√π la commande est lanc√©e ‚Üí **Solution** : `find-up` qui remonte depuis le code ‚Üí **R√®gle √† adopter** : Stabilit√© ind√©pendante du contexte d'ex√©cution

#### Validation

- V√©rifier que `find-up` est pr√©sent dans `devDependencies` du `package.json`
- V√©rifier qu'aucun chemin du type `../../../` n'existe dans le code
- V√©rifier que tous les chemins dans les fichiers de configuration sont relatifs (ne commencent pas par `/`)
- Tester l'ex√©cution du script depuis diff√©rents r√©pertoires pour valider la robustesse

#### Exemples

##### ‚úÖ Correct ‚Äî Version asynchrone (recommand√©e)

```javascript
const findUp = require('find-up');
const path = require('path');

// Cache de la racine d√©tect√©e
let _cachedRepoRoot = null;

/**
 * Obtient la racine du repository
 * @returns {Promise<string>} Chemin absolu vers la racine du repo
 */
async function getRepoRoot() {
  if (!_cachedRepoRoot) {
    const packagePath = await findUp('package.json', { cwd: __dirname });
    if (!packagePath) {
      throw new Error('Could not find project root (package.json not found)');
    }
    _cachedRepoRoot = path.dirname(packagePath);
  }
  return _cachedRepoRoot;
}

/**
 * R√©sout un chemin depuis la racine du repository
 * @param {...string} segments - Segments de chemin relatifs √† repoRoot
 * @returns {Promise<string>} Chemin absolu r√©solu
 */
async function resolveFromRepoRoot(...segments) {
  const repoRoot = await getRepoRoot();
  return path.resolve(repoRoot, ...segments);
}

// Utilisation
async function loadConfig() {
  const configPath = await resolveFromRepoRoot('hermes2022-concepts-site-extraction/config/extraction-config.json');
  // ...
}
```

##### ‚úÖ Correct ‚Äî Version synchrone (contextes non-async)

```javascript
const { findUpSync } = require('find-up');
const path = require('path');

let _cachedRepoRoot = null;

/**
 * Obtient la racine du repository (version synchrone)
 * @returns {string} Chemin absolu vers la racine du repo
 */
function getRepoRootSync() {
  if (!_cachedRepoRoot) {
    const packagePath = findUpSync('package.json', { cwd: __dirname });
    if (!packagePath) {
      throw new Error('Could not find project root (package.json not found)');
    }
    _cachedRepoRoot = path.dirname(packagePath);
  }
  return _cachedRepoRoot;
}

/**
 * R√©sout un chemin depuis la racine du repository (version synchrone)
 * @param {...string} segments - Segments de chemin relatifs √† repoRoot
 * @returns {string} Chemin absolu r√©solu
 */
function resolveFromRepoRootSync(...segments) {
  const repoRoot = getRepoRootSync();
  return path.resolve(repoRoot, ...segments);
}
```

##### ‚ùå Incorrect ‚Äî Chemins relatifs fragiles

```javascript
// ‚ùå MAUVAIS : Casse si le fichier est d√©plac√©
const configPath = path.resolve(__dirname, '../../../config/extraction-config.json');

// ‚ùå MAUVAIS : D√©pend d'o√π la commande est lanc√©e
const configPath = path.resolve(process.cwd(), 'config/extraction-config.json');

// ‚ùå MAUVAIS : Chemin absolu cod√© en dur
const configPath = '/home/user/project/config/extraction-config.json';
```

### Configuration des chemins dans les fichiers de configuration

#### R√®gles obligatoires pour les chemins dans les fichiers de configuration

- **CHEMINS RELATIFS** : Tous les chemins dans les fichiers de configuration (JSON, YAML, etc.) doivent √™tre relatifs √† la racine du projet
- **PAS DE SLASH INITIAL** : Les chemins ne doivent pas commencer par `/` (r√©serv√© aux chemins absolus)
- **FORMAT STANDARD** : Utiliser le format `module/sous-repertoire/fichier.ext` depuis repoRoot
- **DOCUMENTATION** : Documenter dans les fichiers de configuration que les chemins sont relatifs √† repoRoot

#### Exemples de configuration

##### ‚úÖ Correct ‚Äî Chemins relatifs dans extraction-config.json

```json
{
  "nuextract": {
    "apiKeyFile": "hermes2022-concepts-site-extraction/config/nuextract-api-key.key",
    "templateTransformationInstructionFile": "hermes2022-concepts-site-extraction/config/instructions-template-nuextract.md",
    "mainJSONConfigurationFile": "shared/hermes2022-extraction-files/config/json-schemas/hermes2022-concepts.json"
  },
  "artifactBaseDir": "shared/hermes2022-extraction-files/data"
}
```

##### ‚ùå Incorrect ‚Äî Chemins mal format√©s

```json
{
  "nuextract": {
    "apiKeyFile": "/config/nuextract-api-key.key",
    "templateTransformationInstructionFile": "../config/instructions-template-nuextract.md",
    "mainJSONConfigurationFile": "/home/user/project/shared/hermes2022-extraction-files/config/json-schemas/hermes2022-concepts.json"
  }
}
```

## √âtat d'impl√©mentation

üöß [En cours de d√©ploiement dans le projet]

- ‚úÖ Convention d√©finie : `package.json` comme marqueur
- ‚úÖ Package `find-up` s√©lectionn√© comme solution standard
- üöß √Ä impl√©menter : Module `path-resolver.js` dans hermes2022-concepts-site-extraction
- üöß √Ä migrer : `nuextract-client.js` pour utiliser `find-up`
- üöß √Ä migrer : Tests BDD pour utiliser `find-up`
- ‚ùå √Ä mettre √† jour : Fichiers de configuration avec chemins relatifs depuis repoRoot
