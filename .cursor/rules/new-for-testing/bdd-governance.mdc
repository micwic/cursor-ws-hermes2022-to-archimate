---
description: "Gouvernance des spécifications détaillées selon les principes Behavior Driven Development"
alwaysApply: true
---

# bdd-governance.mdc : Gouvernance des spécifications détaillées selon les principes Behavior Driven Development

> Créé le : [2025-08-14]  
> Dernière mise à jour : [2025-10-29]

## Objectifs de la règle

- Définir la gouvernance des spécifications détaillées selon les principes Behavior Driven Development
- Appliquer le cycle Rouge → Vert → Refactor (TDD/BDD)
- Assurer la cohérence entre les spécifications générales et les spécifications détaillées
- Éviter la redondance et l'incohérence dans l'élaboration des spécifications

## Problèmes résolus/à résoudre

- Confusion entre spécifications générales et spécifications détaillées
- Redondance entre différents niveaux de spécifications
- Manque de cohérence dans l'approche BDD

## Comportement général attendu

- L'IA distingue clairement les spécifications générales des spécifications détaillées
- L'IA applique les principes BDD pour les spécifications détaillées
- L'IA maintient la cohérence avec les spécifications générales

## Contexte d'application et généralités

- Les spécifications détaillées sont issues des processus itératifs des principes Behavior Driven Development
- Elles complètent et détaillent les spécifications générales sans les remplacer
- Elles respectent les principes de ségrégation des domaines

## Principe : Spécifications générales vs spécifications détaillées

### Spécifications générales (fichiers `.mdc` de règles/spécifications)

- **Contenu** : Décisions architecturales et techniques justifiées, patterns validés avec exemples minimalistes, anti-patterns avec solutions recommandées, état d'implémentation
- **Objectif** : Documenter les choix de conception et les principes directeurs
- **Niveau de détail** : Succinct, éviter la redondance avec les fichiers BDD

### Spécifications détaillées (fichiers BDD)

- **`.feature`** : Scénarios Gherkin exhaustifs (Given/When/Then) décrivant tous les comportements attendus
- **`.steps.ts`** : Implémentation complète des steps avec mocking, assertions et logique de test
- **Objectif** : Définir précisément le comportement attendu du code
- **Niveau de détail** : Exhaustif et exécutable

### Règle de non-redondance

- **Les spécifications générales ne doivent PAS dupliquer le contenu des fichiers `.feature` et `.steps.ts`**
- **Les fichiers `.feature` et `.steps.ts` représentent les spécifications détaillées exécutables**
- **Les spécifications générales documentent uniquement les décisions et patterns, pas les scénarios détaillés**

## Règles à appliquer

### Spécifications détaillées BDD

#### Règles obligatoires à appliquer

- **RESPECTER HIÉRARCHIE** : Les spécifications détaillées respectent la hiérarchie des spécifications générales
- **APPLIQUER BDD** : Utiliser les principes Behavior Driven Development pour l'élaboration
- **MAINTENIR COHÉRENCE** : Assurer la cohérence avec les spécifications parentes

#### Comportements interdits/proscrits/à éviter

- **REDONDANCE** : Ne pas dupliquer les spécifications générales
- **INCOHÉRENCE** : Ne pas créer de spécifications contradictoires avec les générales
- **SURSPÉCIFICATION** : Éviter le détail excessif non nécessaire

#### Validation

- Vérifier la cohérence avec les spécifications générales
- Valider l'application des principes BDD
- Contrôler l'absence de redondance

### Cycle Rouge → Vert → Refactor (TDD/BDD)

#### Principe

- **Rouge**: écrire/scénariser un comportement en Gherkin (`.feature`) qui échoue; ajouter le minimum de steps pour reproduire l’échec.
- **Vert**: implémenter le minimum dans les steps pour faire passer le scénario; viser le plus simple qui fonctionne.
- **Refactor**: factoriser les steps, mutualiser dans `__tests__/shared/`, améliorer la lisibilité sans changer le comportement.

#### Critères de validation

- **Exécution**: les scénarios `.feature` ciblés passent via Jest-Cucumber (config partagée).
- **Structure**: features en `__tests__/integration/` ou `__tests__/e2e/`, steps associées, steps partagées en `__tests__/shared/`.
- **Langue**: `# language: fr` en tête des fichiers `.feature`.
- **Traçabilité**: messages de commit alignés: `RED`, `GREEN`, `REFACTOR`.

#### Anti-patterns (à éviter)

- Implémenter avant d’écrire le scénario qui échoue (inversion Rouge→Vert).
- Mélanger tests unitaires et BDD dans les mêmes répertoires.
- Gros refactoring sans scénarios au vert.
- Steps trop couplées au parsing au lieu du comportement.
- Duplication de steps réutilisables non mutualisées.

#### Références

- Voir `@bdd-cucumber-vscode-plugin-governance.mdc` (structure des tests et plugin VSCode).
- Voir la configuration Jest-Cucumber partagée (`cucumber-jest.config.js`).

### Évolution à prévoir

- Extension des principes BDD selon l'évolution du projet
- Adaptation des spécifications détaillées aux nouveaux besoins
