---
description: "Gouvernance pratique des outils Jest et jest-cucumber (commandes, patterns, structure)"
alwaysApply: true
---

# jest-cucumber-governance.mdc : Gouvernance pratique des outils Jest et jest-cucumber

> Cr√©√© le : 2025-10-31
> Derni√®re mise √† jour : 2025-10-31

## Objectifs de la r√®gle

- D√©finir les patterns et pratiques pour utiliser Jest et jest-cucumber efficacement
- Standardiser les commandes d'ex√©cution des tests
- Documenter la structure des fichiers et r√©pertoires de tests
- √âviter les erreurs courantes lors de l'ex√©cution des tests BDD

## Probl√®mes r√©solus/√† r√©soudre

- Confusion entre `--testPathPattern` et `--testPathPatterns`
- Erreurs de filtrage des tests avec jest-cucumber
- Incoh√©rence dans l'ex√©cution des tests selon le contexte
- Manque de documentation sur les bonnes pratiques Jest-Cucumber

## Comportement g√©n√©ral attendu

- L'IA utilise syst√©matiquement `--testPathPatterns` (pluriel) pour filtrer les tests par chemin
- L'IA ex√©cute les tests via `npm test` et non `npx jest` directement
- L'IA respecte la structure des r√©pertoires d√©finie pour les tests BDD
- L'IA applique les timeouts conformes √† la gouvernance selon le type de test

## Contexte d'application et g√©n√©ralit√©s

- S'applique √† tous les projets utilisant Jest et jest-cucumber pour les tests BDD
- Compl√®te `@bdd-governance.mdc` qui d√©finit les aspects m√©thodologiques BDD
- Utilise la configuration Jest partag√©e et la structure standard des tests

## R√®gles √† appliquer

### Ex√©cution des tests avec Jest

#### R√®gles obligatoires √† appliquer

- **EX√âCUTER VIA NPM** : Toujours utiliser `npm test` ou `npm run test` au lieu de `npx jest` directement
- **PATTERN PATH PLURIEL** : Utiliser `--testPathPatterns` (pluriel) pour filtrer par chemin de fichier
- **FILTRAGE PAR CHEMIN** : Pr√©f√©rer le filtrage par chemin plut√¥t que par nom de test avec jest-cucumber

#### Patterns valid√©s

**Ex√©cution de tous les tests :**

```bash
npm test
```

**Filtrage par r√©pertoire :**

```bash
npm test -- --testPathPatterns="with-external-system"
```

**Filtrage par fichier sp√©cifique :**

```bash
npm test -- --testPathPatterns="template-generation"
```

**Ex√©cution avec options :**

```bash
npm test -- --testPathPatterns="integration" --verbose --no-coverage
```

#### Anti-patterns √† √©viter

- **TESTPATH PATTERN SINGULIER** : √âviter `--testPathPattern` (singulier) ‚Üí **Solution** : Utiliser `--testPathPatterns` (pluriel) ‚Üí **R√®gle √† adopter** : Pattern pluriel obligatoire
- **NOM DE TEST** : √âviter `--testNamePattern` avec jest-cucumber ‚Üí **Solution** : Filtrer par chemin ‚Üí **R√®gle √† adopter** : Filtrage par chemin pour jest-cucumber
- **NPX JEST DIRECT** : √âviter `npx jest` directement ‚Üí **Solution** : Utiliser `npm test` ‚Üí **R√®gle √† adopter** : Ex√©cution via npm scripts

#### Justification

- **Pluriel requis** : Jest a remplac√© `--testPathPattern` par `--testPathPatterns` (pluriel) dans les versions r√©centes
- **Chemin vs Nom** : Avec jest-cucumber, les noms de tests proviennent des sc√©narios Gherkin, le filtrage par chemin est plus fiable
- **Scripts npm** : L'utilisation de `npm test` garantit le respect de la configuration Jest du projet

#### √âtat d'impl√©mentation

‚úÖ [R√®gle document√©e - 2025-10-31]
‚úÖ [Appliqu√©e dans package.json scripts - 2025-10-31]

### Structure des tests d'int√©gration

#### R√®gles obligatoires √† appliquer

- **R√âPERTOIRES SP√âCIALIS√âS** : Organiser les tests selon leur type (r√©el vs mock√©)
- **SUFFIXE MOCK√â** : Utiliser le suffixe `-mocked` pour les fichiers de tests mock√©s
- **PAIRES FICHIERS** : Placer les fichiers `.feature` et `.steps.ts` c√¥te √† c√¥te dans le m√™me r√©pertoire

#### Patterns valid√©s

**Structure standard :**

```
__tests__/
  integration/
    with-external-system/          # Tests avec appels API r√©els
      template-generation.feature
      template-generation.steps.ts
      nuextract-project-management.feature
      nuextract-project-management.steps.ts
    with-external-system-mocked/   # Tests avec syst√®me externe mock√©
      template-generation-mocked.feature
      template-generation-mocked.steps.ts
      nuextract-project-management-mocked.feature
      nuextract-project-management-mocked.steps.ts
```

#### Timeouts selon le type de test

**Tests r√©els (`with-external-system/`) :**

- Mode async : 120s (timeout dans le test : `120000`)
- Mode sync : 45s (timeout dans le test : `45000`)

**Tests mock√©s (`with-external-system-mocked/`) :**

- Tous les tests : 5s (timeout dans le test : `5000`)

#### Exemples

**Test r√©el avec timeout async :**

```typescript
test('G√©n√©ration de template NuExtract avec infer-template-async', ({ given, when, then }) => {
  // ... steps ...
}, 120000); // 120s pour mode async
```

**Test mock√© avec timeout court :**

```typescript
test('Erreur HTTP 500 en mode async', ({ given, when, then }) => {
  // ... steps ...
}, 5000); // 5s pour test mock√©
```

#### Anti-patterns √† √©viter

- **TIMEOUT ABSENT** : √âviter les tests sans timeout explicite ‚Üí **Solution** : Toujours d√©finir un timeout ‚Üí **R√®gle √† adopter** : Timeout obligatoire selon le type
- **TIMEOUT INCONFORME** : √âviter les timeouts non conformes √† la gouvernance ‚Üí **Solution** : Respecter async 120s/sync 45s pour r√©els, < 5s pour mock√©s ‚Üí **R√®gle √† adopter** : Timeouts standardis√©s

### Configuration Jest-Cucumber

#### R√®gles obligatoires √† appliquer

- **CONFIGURATION STANDARD** : Utiliser `jest.config.js` (pas de nommage personnalis√©)
- **TESTMATCH PATTERN** : Pattern standard `**/__tests__/{unit,integration,e2e}/**/*.steps.{js,ts}`
- **SETUP FICHIER** : Fichier setup partag√© dans `__tests__/support/jest-cucumber-setup.js`

#### Patterns valid√©s

**Configuration Jest standard :**

```javascript
// jest.config.js
module.exports = {
  testMatch: [
    '**/__tests__/{unit,integration,e2e}/**/*.steps.{js,ts}'
  ],
  testEnvironment: 'node',
  testTimeout: 15000, // Timeout global par d√©faut
  setupFilesAfterEnv: [
    '<rootDir>/__tests__/support/jest-cucumber-setup.js'
  ]
};
```

#### R√©f√©rences

- Voir `@bdd-governance.mdc` pour les aspects m√©thodologiques BDD
- Voir `@bdd-cucumber-vscode-plugin-governance.mdc` pour la configuration du plugin VSCode

### Hooks d'isolation des tests

#### R√®gles obligatoires √† appliquer

- **BEFORE/EACH GLOBAL** : Hooks `beforeEach` et `afterEach` au niveau du fichier de tests
- **CLEANUP SYST√âMATIQUE** : `jest.clearAllMocks()` dans `beforeEach`, `jest.restoreAllMocks()` dans `afterEach`
- **ISOLATION COMPL√àTE** : √âviter les effets de bord entre tests

#### Patterns valid√©s

**Hooks globaux dans fichier de tests :**

```typescript
defineFeature(feature, (test) => {
  // Hooks d'isolation pour les tests d'int√©gration
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  afterEach(() => {
    jest.restoreAllMocks();
  });

  // Tests individuels...
});
```

#### R√©f√©rences

- Voir `@test-mock-governance.mdc` pour les d√©tails sur l'isolation des mocks

## Validation

- V√©rifier que les commandes utilisent `--testPathPatterns` (pluriel)
- V√©rifier que les tests sont ex√©cut√©s via `npm test`
- V√©rifier que les timeouts sont conformes selon le type de test
- V√©rifier que les hooks d'isolation sont pr√©sents dans tous les fichiers de tests

## √âtat d'impl√©mentation

‚úÖ [R√®gle d√©finie - 2025-10-31]
üöß [Application progressive sur les projets BDD]
