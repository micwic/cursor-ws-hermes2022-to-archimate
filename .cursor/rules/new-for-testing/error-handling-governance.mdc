---
description: Gouvernance de la gestion des erreurs Javascript (try-catch, throw, Error)
alwaysApply: true
---

# error-handling-governance.mdc : Gouvernance de la gestion des erreurs Javascript

> Cr√©√© le : 2025-10-25
> Derni√®re mise √† jour : 2025-10-25

## Objectifs de la r√®gle

- Harmoniser la gestion des erreurs Javascript
- Pr√©server la tra√ßabilit√© des erreurs (stack trace)
- Fournir des messages d'erreur clairs et contextualis√©s
- Faciliter le d√©bogage et les tests

## Probl√®mes r√©solus/√† r√©soudre

- Incoh√©rence entre propagation simple (`throw error`) et cr√©ation de nouvelles erreurs (`throw new Error(...)`)
- Perte de stack trace lors de la cr√©ation de nouvelles erreurs
- Messages d'erreur parfois trop g√©n√©riques ou sans contexte

## Comportement g√©n√©ral attendu

- L'IA et l'utilisateur appliquent syst√©matiquement les patterns d√©finis ci-dessous
- Les erreurs pr√©servent le contexte d'origine tout en ajoutant des informations locales
- Les messages d'erreur sont clairs et permettent d'identifier rapidement la source du probl√®me

## Contexte d'application et g√©n√©ralit√©s

- S'applique √† tout le code JavaScript/TypeScript
- Utilise les standards JavaScript modernes (ES2022 Error Cause)
- Compatible avec Node.js 16+ et les frameworks de test (Jest, Jest-Cucumber)

## R√®gles √† appliquer

### Pattern 1 : Erreurs de validation / Erreurs m√©tier

#### Description

Utiliser pour les erreurs de validation de param√®tres, de configuration, ou de logique m√©tier d√©tect√©es localement.

#### Pattern valid√©

```javascript
// Validation simple
if (!param) {
  throw new Error('Parameter is required. Script stopped.');
}

// Validation avec contexte
if (templateMode !== 'sync' && templateMode !== 'async') {
  throw new Error(`templateMode invalide: "${templateMode}". Valeurs accept√©es: "sync", "async". Script stopped.`);
}
```

#### R√®gles

- **Message explicite** : Indiquer clairement ce qui est invalide et pourquoi
- **Valeurs attendues** : Mentionner les valeurs accept√©es si applicable
- **Terminaison "Script stopped"** : Ajouter syst√©matiquement pour indiquer un arr√™t propre

#### Anti-Patterns

- ‚ùå Message g√©n√©rique : `throw new Error('Invalid input')`
- ‚ùå Sans valeurs attendues : `throw new Error('Mode invalide')`

### Pattern 2 : Wrapping d'erreur externe avec contexte (Error Cause ES2022)

#### Description

Utiliser pour les erreurs provenant de biblioth√®ques externes (fs, https, jwt) o√π on veut ajouter du contexte tout en pr√©servant l'erreur originale.

#### Pattern valid√©

```javascript
// Avec Error Cause (ES2022)
try {
  const decoded = jwt.decode(apiKey, { complete: true });
  // ...
} catch (error) {
  throw new Error('API key format is invalid. Script stopped.', { cause: error });
}

// Pour Node.js < 16.9 (fallback sans cause)
try {
  fs.readFileSync(path, 'utf8');
} catch (error) {
  throw new Error(`Configuration file not found: ${error.message}. Script stopped.`);
}
```

#### R√®gles

- **Pr√©f√©rer Error Cause** : Utiliser `{ cause: error }` pour pr√©server la stack trace originale
- **Message contextualis√©** : Ajouter le contexte local (ex: "Configuration file", "API key")
- **Logging avant throw** : Logger avec `console.error()` avant de throw
- **Terminaison "Script stopped"** : Ajouter syst√©matiquement

#### Anti-Patterns

- ‚ùå Perte de cause : `throw new Error('Error occurred')`
- ‚ùå Message trop vague : `throw new Error('File error')`

### Pattern 3 : Propagation d'erreur dans fonctions d'orchestration

#### Description

Utiliser dans les fonctions d'orchestration (qui appellent d'autres fonctions) o√π l'erreur est d√©j√† contextualis√©e.

#### Pattern valid√©

```javascript
async function generateTemplate(config, apiKey) {
  try {
    const instructions = loadInstructions(); // Fonction qui peut throw
    const schema = loadAndResolveSchemas(); // Fonction qui peut throw
    // ... logique m√©tier ...
    return template;
  } catch (error) {
    console.error(`Erreur lors de la g√©n√©ration du template: ${error.message}`);
    throw error; // Propagation simple avec logging
  }
}
```

#### R√®gles

- **Logging obligatoire** : Toujours logger avec `console.error()` avant propagation
- **Propagation simple** : `throw error` sans modification
- **Contexte dans le log** : Le message de log ajoute le contexte de la fonction

#### Anti-Patterns

- ‚ùå Propagation sans logging : `catch (error) { throw error; }`
- ‚ùå Recr√©ation d'erreur : `throw new Error(error.message)` ‚Üí perd la stack

### Pattern 4 : Erreurs HTTP/API avec Promise

#### Description

Utiliser dans les fonctions retournant des Promises pour les appels HTTP/API.

#### Pattern valid√©

```javascript
async function getNuExtractProjects(apiKey) {
  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        if (res.statusCode !== 200) {
          reject(new Error(`API error: ${res.statusCode} - ${data}`));
          return;
        }
        try {
          resolve(JSON.parse(data));
        } catch (err) {
          reject(new Error('Invalid JSON response', { cause: err }));
        }
      });
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Timeout: Request exceeded 10 seconds'));
    });
    
    req.on('error', (err) => {
      reject(new Error('Network error', { cause: err }));
    });
    
    req.end();
  });
}
```

#### R√®gles

- **reject avec new Error** : Toujours cr√©er une Error explicite
- **Contexte HTTP** : Inclure status code, timeout, ou type d'erreur r√©seau
- **Error Cause** : Pour erreurs de parsing ou r√©seau
- **Messages clairs** : "API error", "Invalid JSON response", "Timeout", "Network error"

#### Anti-Patterns

- ‚ùå Reject direct : `reject(err)` sans contexte
- ‚ùå Message vague : `reject(new Error('Request failed'))`

### Tableau r√©capitulatif des patterns

| Contexte | Pattern | Exemple | Stack trace pr√©serv√©e |
|:---------|:--------|:--------|:---------------------|
| Validation locale | Nouvelle erreur | `throw new Error('Invalid param')` | N/A (nouvelle erreur) |
| Wrapping externe | Error Cause | `throw new Error('Context', { cause: err })` | ‚úÖ Oui |
| Orchestration | Propagation + log | `console.error(...); throw error;` | ‚úÖ Oui |
| HTTP/API Promise | reject Error | `reject(new Error('API error', { cause: err }))` | ‚úÖ Oui (avec cause) |

## Validation

- V√©rifier que tous les `throw` et `reject` utilisent le pattern appropri√©
- V√©rifier la pr√©sence de logging avant propagation
- V√©rifier l'utilisation d'Error Cause quand applicable
- Tester que les messages d'erreur sont clairs et contextualis√©s

## √âtat d'impl√©mentation

üöß [En cours de d√©ploiement - 2025-10-25]

- ‚úÖ R√®gle d√©finie et document√©e
- üöß √Ä impl√©menter : Mise √† niveau du code existant
- üöß √Ä impl√©menter : Tests de validation des messages d'erreur
